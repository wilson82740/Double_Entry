package model;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class VisitExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table VISIT
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table VISIT
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table VISIT
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VISIT
     *
     * @mbggenerated
     */
    public VisitExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VISIT
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VISIT
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VISIT
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VISIT
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VISIT
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VISIT
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VISIT
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VISIT
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VISIT
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VISIT
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table VISIT
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
      protected List<Criterion> criteria;

      protected GeneratedCriteria() {
        super();
        criteria = new ArrayList<Criterion>();
      }

      public boolean isValid() {
        return criteria.size() > 0;
      }

      public List<Criterion> getAllCriteria() {
        return criteria;
      }

      public List<Criterion> getCriteria() {
        return criteria;
      }

      protected void addCriterion(String condition) {
        if (condition == null) {
          throw new RuntimeException("Value for condition cannot be null");
        }
        criteria.add(new Criterion(condition));
      }

      protected void addCriterion(String condition, Object value, String property) {
        if (value == null) {
          throw new RuntimeException("Value for " + property + " cannot be null");
        }
        criteria.add(new Criterion(condition, value));
      }

      protected void addCriterion(String condition, Object value1, Object value2, String property) {
        if (value1 == null || value2 == null) {
          throw new RuntimeException("Between values for " + property + " cannot be null");
        }
        criteria.add(new Criterion(condition, value1, value2));
      }

      protected void addCriterionForJDBCDate(String condition, Date value, String property) {
        if (value == null) {
          throw new RuntimeException("Value for " + property + " cannot be null");
        }
        addCriterion(condition, new java.sql.Date(value.getTime()), property);
      }

      protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
        if (values == null || values.size() == 0) {
          throw new RuntimeException("Value list for " + property + " cannot be null or empty");
        }
        List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
        Iterator<Date> iter = values.iterator();
        while (iter.hasNext()) {
          dateList.add(new java.sql.Date(iter.next().getTime()));
        }
        addCriterion(condition, dateList, property);
      }

      protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
        if (value1 == null || value2 == null) {
          throw new RuntimeException("Between values for " + property + " cannot be null");
        }
        addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
      }

      public Criteria andIdIsNull() {
        addCriterion("VISIT.ID is null");
        return (Criteria) this;
      }

      public Criteria andIdIsNotNull() {
        addCriterion("VISIT.ID is not null");
        return (Criteria) this;
      }

      public Criteria andIdEqualTo(Long value) {
        addCriterion("VISIT.ID =", value, "id");
        return (Criteria) this;
      }

      public Criteria andIdNotEqualTo(Long value) {
        addCriterion("VISIT.ID <>", value, "id");
        return (Criteria) this;
      }

      public Criteria andIdGreaterThan(Long value) {
        addCriterion("VISIT.ID >", value, "id");
        return (Criteria) this;
      }

      public Criteria andIdGreaterThanOrEqualTo(Long value) {
        addCriterion("VISIT.ID >=", value, "id");
        return (Criteria) this;
      }

      public Criteria andIdLessThan(Long value) {
        addCriterion("VISIT.ID <", value, "id");
        return (Criteria) this;
      }

      public Criteria andIdLessThanOrEqualTo(Long value) {
        addCriterion("VISIT.ID <=", value, "id");
        return (Criteria) this;
      }

      public Criteria andIdIn(List<Long> values) {
        addCriterion("VISIT.ID in", values, "id");
        return (Criteria) this;
      }

      public Criteria andIdNotIn(List<Long> values) {
        addCriterion("VISIT.ID not in", values, "id");
        return (Criteria) this;
      }

      public Criteria andIdBetween(Long value1, Long value2) {
        addCriterion("VISIT.ID between", value1, value2, "id");
        return (Criteria) this;
      }

      public Criteria andIdNotBetween(Long value1, Long value2) {
        addCriterion("VISIT.ID not between", value1, value2, "id");
        return (Criteria) this;
      }

      public Criteria andStudyeventdefidIsNull() {
        addCriterion("STUDYEVENTDEFFORM.STUDYEVENTDEFID is null");
        return (Criteria) this;
      }

      public Criteria andStudyeventdefidIsNotNull() {
        addCriterion("STUDYEVENTDEFFORM.STUDYEVENTDEFID is not null");
        return (Criteria) this;
      }

      public Criteria andStudyeventdefidEqualTo(Long value) {
        addCriterion("STUDYEVENTDEFFORM.STUDYEVENTDEFID =", value, "studyeventid");
        return (Criteria) this;
      }

      public Criteria andStudyeventdefidNotEqualTo(Long value) {
        addCriterion("STUDYEVENTDEFFORM.STUDYEVENTDEFID <>", value, "studyeventid");
        return (Criteria) this;
      }

      public Criteria andStudyeventdefidGreaterThan(Long value) {
        addCriterion("STUDYEVENTDEFFORM.STUDYEVENTDEFID >", value, "studyeventid");
        return (Criteria) this;
      }

      public Criteria andStudyeventdefidGreaterThanOrEqualTo(Long value) {
        addCriterion("STUDYEVENTDEFFORM.STUDYEVENTDEFID >=", value, "studyeventid");
        return (Criteria) this;
      }

      public Criteria andStudyeventdefidLessThan(Long value) {
        addCriterion("STUDYEVENTDEFFORM.STUDYEVENTDEFID <", value, "studyeventid");
        return (Criteria) this;
      }

      public Criteria andStudyeventdefidLessThanOrEqualTo(Long value) {
        addCriterion("STUDYEVENTDEFFORM.STUDYEVENTDEFID <=", value, "studyeventid");
        return (Criteria) this;
      }

      public Criteria andStudyeventdefidIn(List<Long> values) {
        addCriterion("STUDYEVENTDEFFORM.STUDYEVENTDEFID in", values, "studyeventid");
        return (Criteria) this;
      }

      public Criteria andStudyeventdefidNotIn(List<Long> values) {
        addCriterion("STUDYEVENTDEFFORM.STUDYEVENTDEFID not in", values, "studyeventid");
        return (Criteria) this;
      }

      public Criteria andStudyeventdefidBetween(Long value1, Long value2) {
        addCriterion("STUDYEVENTDEFFORM.STUDYEVENTDEFID between", value1, value2, "studyeventid");
        return (Criteria) this;
      }

      public Criteria andStudyeventdefidNotBetween(Long value1, Long value2) {
        addCriterion("STUDYEVENTDEFFORM.STUDYEVENTDEFID not between", value1, value2, "studyeventid");
        return (Criteria) this;
      }

      public Criteria andProtocolidIsNull() {
        addCriterion("PROTOCOL_PATIENT.PROTOCOLID is null");
        return (Criteria) this;
      }

      public Criteria andProtocolidIsNotNull() {
        addCriterion("PROTOCOL_PATIENT.PROTOCOLID is not null");
        return (Criteria) this;
      }

      public Criteria andProtocolidEqualTo(Long value) {
        addCriterion("PROTOCOL_PATIENT.PROTOCOLID =", value, "protocolid");
        return (Criteria) this;
      }

      public Criteria andProtocolidNotEqualTo(Long value) {
        addCriterion("PROTOCOL_PATIENT.PROTOCOLID <>", value, "protocolid");
        return (Criteria) this;
      }

      public Criteria andProtocolidGreaterThan(Long value) {
        addCriterion("PROTOCOL_PATIENT.PROTOCOLID >", value, "protocolid");
        return (Criteria) this;
      }

      public Criteria andProtocolidGreaterThanOrEqualTo(Long value) {
        addCriterion("PROTOCOL_PATIENT.PROTOCOLID >=", value, "protocolid");
        return (Criteria) this;
      }

      public Criteria andProtocolidLessThan(Long value) {
        addCriterion("PROTOCOL_PATIENT.PROTOCOLID <", value, "protocolid");
        return (Criteria) this;
      }

      public Criteria andProtocolidLessThanOrEqualTo(Long value) {
        addCriterion("PROTOCOL_PATIENT.PROTOCOLID <=", value, "protocolid");
        return (Criteria) this;
      }

      public Criteria andProtocolidIn(List<Long> values) {
        addCriterion("PROTOCOL_PATIENT.PROTOCOLID in", values, "protocolid");
        return (Criteria) this;
      }

      public Criteria andProtocolidNotIn(List<Long> values) {
        addCriterion("PROTOCOL_PATIENT.PROTOCOLID not in", values, "protocolid");
        return (Criteria) this;
      }

      public Criteria andProtocolidBetween(Long value1, Long value2) {
        addCriterion("PROTOCOL_PATIENT.PROTOCOLID between", value1, value2, "protocolid");
        return (Criteria) this;
      }

      public Criteria andProtocolidNotBetween(Long value1, Long value2) {
        addCriterion("PROTOCOL_PATIENT.PROTOCOLID not between", value1, value2, "protocolid");
        return (Criteria) this;
      }
      
      public Criteria andDataRecordIdIsNull() {
        addCriterion("DATARECORD.ID is null");
        return (Criteria) this;
      }

      public Criteria andDataRecordIdIsNotNull() {
        addCriterion("DATARECORD.ID is not null");
        return (Criteria) this;
      }

      public Criteria andDataRecordIdEqualTo(Long value) {
        addCriterion("DATARECORD.ID =", value, "dataRecordId");
        return (Criteria) this;
      }

      public Criteria andDataRecordIdNotEqualTo(Long value) {
        addCriterion("DATARECORD.ID <>", value, "dataRecordId");
        return (Criteria) this;
      }

      public Criteria andDataRecordIdGreaterThan(Long value) {
        addCriterion("DATARECORD.ID >", value, "dataRecordId");
        return (Criteria) this;
      }

      public Criteria andDataRecordIdGreaterThanOrEqualTo(Long value) {
        addCriterion("DATARECORD.ID >=", value, "dataRecordId");
        return (Criteria) this;
      }

      public Criteria andDataRecordIdLessThan(Long value) {
        addCriterion("DATARECORD.ID <", value, "dataRecordId");
        return (Criteria) this;
      }

      public Criteria andDataRecordIdLessThanOrEqualTo(Long value) {
        addCriterion("DATARECORD.ID <=", value, "dataRecordId");
        return (Criteria) this;
      }

      public Criteria andDataRecordIdIn(List<Long> values) {
        addCriterion("DATARECORD.ID in", values, "dataRecordId");
        return (Criteria) this;
      }

      public Criteria andDataRecordIdNotIn(List<Long> values) {
        addCriterion("DATARECORD.ID not in", values, "dataRecordId");
        return (Criteria) this;
      }

      public Criteria andDataRecordIdBetween(Long value1, Long value2) {
        addCriterion("DATARECORD.ID between", value1, value2, "dataRecordId");
        return (Criteria) this;
      }

      public Criteria andDataRecordIdNotBetween(Long value1, Long value2) {
        addCriterion("DATARECORD.ID not between", value1, value2, "dataRecordId");
        return (Criteria) this;
      }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table VISIT
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table VISIT
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}